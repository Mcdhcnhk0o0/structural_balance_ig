import collections
import random as rd
import signed_utils as utils


def generate_signed_networks(c, n: int or list, k, pin, pn, pp):
    """
    quoted from: Community Mining from Signed Social Networks. IEEE Educational Activities Department, 19(10), 1333-1348.

    :param c: number of clusters, int
    :param n: number of nodes in each cluster, int or list
    :param k: degree of each node
    :param pin: the ratio of edges within clusters
    :param pn: the ratio of negative edges within clusters
    :param pp: the ratio of positive edges between clusters
    :return:
    """

    dataset = utils.Dataset()
    g = collections.defaultdict(lambda: collections.defaultdict(lambda: 0))

    if isinstance(n, int):
        n = [n] * c
    node_num = sum(n)
    edge_num = 0
    k = k // 2

    # add edges within clusters
    start_id = [0]
    for num in n:
        e = start_id[-1]
        start_id.append(e + num)

    for i in range(c):

        edges_in_cluster = int(n[i] * pin * k)
        edge_num += edges_in_cluster
        negative_edges_in_cluster = int(edges_in_cluster * pn)

        # add negative edges within clusters
        for _ in range(negative_edges_in_cluster):
            n1, n2 = rd.sample(range(start_id[i], start_id[i + 1]), 2)
            while g[n1][n2] != 0:
                n1, n2 = rd.sample(range(start_id[i], start_id[i + 1]), 2)
            g[n1][n2] = g[n2][n1] = -1

        # add positive edges within clusters
        for _ in range(edges_in_cluster - negative_edges_in_cluster):
            n1, n2 = rd.sample(range(start_id[i], start_id[i + 1]), 2)
            while g[n1][n2] != 0:
                n1, n2 = rd.sample(range(start_id[i], start_id[i + 1]), 2)
            g[n1][n2] = g[n2][n1] = 1

    # add edges between clusters
    edges_between_clusters = int(node_num * k * (1 - pin))
    edge_num += edges_between_clusters
    positive_edges_between_clusters = int(edges_between_clusters * pp)
    # add positive edges between clusters
    for _ in range(positive_edges_between_clusters):
        c1, c2 = rd.sample(range(c), 2)
        while c1 == c2:
            c1, c2 = rd.sample(range(c), 2)
        n1 = rd.choice(range(start_id[c1], start_id[c1 + 1]))
        n2 = rd.choice(range(start_id[c2], start_id[c2 + 1]))
        while g[n1][n2] != 0:
            c1, c2 = rd.sample(range(c), 2)
            while c1 == c2:
                c1, c2 = rd.sample(range(c), 2)
            n1 = rd.choice(range(start_id[c1], start_id[c1 + 1]))
            n2 = rd.choice(range(start_id[c2], start_id[c2 + 1]))
        g[n1][n2] = g[n2][n1] = 1
    # add negative edges between clusters
    for _ in range(edges_between_clusters - positive_edges_between_clusters):
        c1, c2 = rd.sample(range(c), 2)
        while c1 == c2:
            c1, c2 = rd.sample(range(c), 2)
        n1 = rd.choice(range(start_id[c1], start_id[c1 + 1]))
        n2 = rd.choice(range(start_id[c2], start_id[c2 + 1]))
        while g[n1][n2] != 0:
            c1, c2 = rd.sample(range(c), 2)
            while c1 == c2:
                c1, c2 = rd.sample(range(c), 2)
            n1 = rd.choice(range(start_id[c1], start_id[c1 + 1]))
            n2 = rd.choice(range(start_id[c2], start_id[c2 + 1]))
        g[n1][n2] = g[n2][n1] = -1

    dataset.vnum = node_num
    dataset.enum = edge_num
    dataset.data = g
    print("Generation complete!")
    paras = [c, n[0], k, pin, pn, pp]
    utils.dataset2g(file_name="generated_dataset_" + "_".join([str(e) for e in paras]), dataset=dataset)



# 8 [1761, 1747, 1735, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1730, 1730, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729]
# 13 [2345, 2331, 2328, 2323, 2323, 2321, 2320, 2320, 2320, 2320, 2319, 2318, 2317, 2317, 2317, 2317, 2317, 2317, 2317, 2317, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315]
# 18 [2956, 2937, 2931, 2930, 2929, 2927, 2927, 2927, 2927, 2926, 2926, 2925, 2925, 2925, 2922, 2922, 2922, 2919, 2919, 2919, 2919, 2919, 2919, 2919, 2919, 2919, 2919, 2919, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917]
# 23 [3561, 3522, 3513, 3512, 3511, 3511, 3508, 3507, 3505, 3505, 3502, 3500, 3500, 3500, 3498, 3498, 3497, 3497, 3497, 3497, 3497, 3497, 3497, 3496, 3496, 3496, 3496, 3496, 3495, 3495, 3495, 3495, 3495, 3495, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3493, 3493, 3493, 3493, 3493, 3493, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3491, 3491, 3491, 3491, 3491, 3491, 3491, 3491, 3491, 3491, 3491, 3491, 3491, 3491, 3491, 3491, 3491, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490, 3490]


generate_signed_networks(c=100, n=20, k=12, pin=0.8, pn=0.2, pp=0.5)
